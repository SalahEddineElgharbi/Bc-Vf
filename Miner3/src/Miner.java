
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.math.BigInteger;
import java.net.ServerSocket;
import java.net.Socket;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;
import java.util.HashSet;
import java.util.Random;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author ESE
 */
public class Miner extends javax.swing.JFrame {

    static int MyPort = 4443;
    static String proof_W;
    static String hash;
    private BigInteger N, phiN, p, q, e, d;

    public Miner() {
        initComponents();
                label_address.setText(Integer.toString(MyPort));

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        show = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        label_address = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setLocation(new java.awt.Point(200, 100));

        jButton1.setFont(new java.awt.Font("Tahoma", 3, 14)); // NOI18N
        jButton1.setForeground(new java.awt.Color(90, 10, 90));
        jButton1.setText("Start Listen");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 3, 24)); // NOI18N
        jLabel1.setText("Miner");

        show.setColumns(20);
        show.setRows(5);
        jScrollPane2.setViewportView(show);

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setText("Logs :");

        label_address.setFont(new java.awt.Font("Tahoma", 3, 18)); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(16, 16, 16))
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 687, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(244, 244, 244)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(label_address, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(label_address, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 7, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 380, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        new show_info().start();
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Miner.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Miner.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Miner.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Miner.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Miner().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel label_address;
    private javax.swing.JTextArea show;
    // End of variables declaration//GEN-END:variables

    public class show_info extends Thread {

        public void run() {
            Socket s = null;
            ServerSocket ss2 = null;
            show.append("Miner Listening......\n");

            try {
                ss2 = new ServerSocket(MyPort); // can also use static final PORT_NUM , when defined

            } catch (IOException e) {
                e.printStackTrace();
                show.append("Server error\n");

            }

            while (true) {
                try {
                    // start the function of the server
                    s = ss2.accept();
                    // show.append("connection Established");

                    ServerThread st = new ServerThread(s);
                    st.start();

                } catch (Exception e) {
                    e.printStackTrace();
                    show.append("Connection Error\n");

                }
            }

        }
    }

    class ServerThread extends Thread {

        String line = null;
        BufferedReader is = null;
        PrintWriter os = null;
        Socket s = null;
        boolean exist_D = false;

        public ServerThread(Socket s) {
            this.s = s;
        }

        public void run() {
            try {
                is = new BufferedReader(new InputStreamReader(s.getInputStream()));
                os = new PrintWriter(s.getOutputStream());

            } catch (IOException e) {
                show.append("IO error in server thread\n");
            }
          try {
                line = is.readLine();
                if (line.compareTo("Key?") == 0) {
                    show.append("▁▂▄▅▆▆▆▇█ 【﻿Ｇｅｎｅｒａｔｉｏｎ　Ｋｅｙｓ】 █▇▆▆▆▅▄▂▁\n");
                    show.append("Public Key is (e,n)  -  Private Key is (d,n)\n");
                    generate_keys();
                    show.append("░▒▒▒▓▓▓▓███████ 【 Ｓｅｎｄｉｎｇ Ｋｅｙｓ 】 ███████▓▓▓▓▒▒▒░ \n");
                } else if (line.compareTo("proof_W?") == 0) {
                    // receive the data
                    line = is.readLine();
                    // send the hash and the proof of work
                    Hash_Proof_Work(line);
                    os.println(hash);
                    os.flush();
                    os.println(proof_W);
                    os.flush();
                }

            } catch (IOException e) {

                line = this.getName(); //reused String line for getting thread name
                show.append("IO Error/ Client " + line + " terminated abruptly\n");
            } catch (NullPointerException e) {
                line = this.getName(); //reused String line for getting thread name
                show.append("Client " + line + " Closed\n");
            } catch (NoSuchAlgorithmException ex) {
                Logger.getLogger(Miner.class.getName()).log(Level.SEVERE, null, ex);
            } finally {
                try {
                    //show.append("Connection Closing..");
                    if (is != null) {
                        is.close();
                        //show.append(" Socket Input Stream Closed");
                    }

                    if (os != null) {
                        os.close();
                        //show.append("Socket Out Closed");
                    }
                    if (s != null) {
                        s.close();
                        //show.append("Socket Closed");
                    }

                } catch (IOException ie) {
                    show.append("Socket Close Error\n");
                }
            }//end finally
        }

        void generate_keys() {

            int keySize = 2048;

            if (keySize < 512) {
                throw new IllegalArgumentException("Key size too small.");
            }
            SecureRandom rand = new SecureRandom();
            generatePQ(keySize / 2, rand);
            N = p.multiply(q);
            phiN = p.subtract(BigInteger.ONE).multiply(q.subtract(BigInteger.ONE));
            generateExponents(invertibleSet());

            show.append("Bit length =" + keySize + "\n");
            show.append("e =" + e + "\n");
            show.append("d =" + d + "\n");
            show.append("n =" + N + "\n");
            os.println(e.toString());
            os.flush();
            os.println(d.toString());
            os.flush();
            os.println(N.toString());
            os.flush();

        }

        private void generatePQ(int bitLength, Random rand) {
            while (true) {
                p = generateOddPrime(bitLength, rand);
                q = generateOddPrime(bitLength, rand);
                if (!p.equals(q)) {
                    return;
                }
            }
        }

        private BigInteger generateOddPrime(int bitLength, Random rand) {
            BigInteger two = new BigInteger("2");
            while (true) {
                BigInteger prime = BigInteger.probablePrime(bitLength, rand);
                if (!prime.mod(two).equals(BigInteger.ZERO)) {
                    return prime;
                }
            }
        }

        private void generateExponents(BigInteger[] invertibleSet) {
            Random rand = new Random();
            while (true) {
                BigInteger invertible = invertibleSet[rand
                        .nextInt(invertibleSet.length)];
                BigInteger inverse = invertible.modInverse(phiN);
                if (invertible.multiply(inverse).mod(phiN)
                        .equals(BigInteger.ONE.mod(phiN))) {
                    e = invertible;
                    d = inverse;
                    return;
                }
            }
        }

        private BigInteger[] invertibleSet() {
            final int maxSize = 100000;
            Set<BigInteger> invertibles = new HashSet<BigInteger>();
            BigInteger end = N.subtract(BigInteger.ONE);
            for (BigInteger i = new BigInteger("5"); i.compareTo(end) < 0; i = i
                    .add(BigInteger.ONE)) {
                if (i.gcd(phiN).equals(BigInteger.ONE)) {
                    invertibles.add(i);
                    if (invertibles.size() == maxSize) {
                        break;
                    }
                }
            }
            return invertibles.toArray(new BigInteger[invertibles.size()]);
        }

        ////////////////////  HASHAGE   ////////////////////////////////////////
        public void Hash_Proof_Work(String input) throws NoSuchAlgorithmException {

            boolean proof_accept;
            do {
                Random randNum = new Random();
                int len = 100;//maxLimit.bitLength();
                BigInteger res = new BigInteger(len, randNum);
                proof_W = res.toString();

                hash = SHA5(SHA3(SHA2(SHA1(input + proof_W))));
                proof_accept = true;
                // The condition to generate the proof of work.
                for (int i = 0; i < 1; i++) {
                    if (Character.getNumericValue(hash.charAt(i)) != 0) {
                        proof_accept = false;
                    }
                }
            } while (!proof_accept);

        }

        public String SHA1(String input) throws NoSuchAlgorithmException {

            MessageDigest md = MessageDigest.getInstance("SHA1");
            md.update(input.getBytes());

            byte[] digest = md.digest();
            StringBuffer sb = new StringBuffer();
            for (byte b : digest) {
                sb.append(String.format("%02x", b & 0xff));
            }

            return sb.toString();
        }

        public String SHA2(String input) throws NoSuchAlgorithmException {
            // SHA256
            MessageDigest md = MessageDigest.getInstance("SHA-256");
            md.update(input.getBytes());

            byte[] digest = md.digest();
            StringBuffer sb = new StringBuffer();
            for (byte b : digest) {
                sb.append(String.format("%02x", b & 0xff));
            }

            return sb.toString();
        }

        public String SHA3(String input) throws NoSuchAlgorithmException {
            // SHA384 
            MessageDigest md = MessageDigest.getInstance("SHA-384");
            md.update(input.getBytes());

            byte[] digest = md.digest();
            StringBuffer sb = new StringBuffer();
            for (byte b : digest) {
                sb.append(String.format("%02x", b & 0xff));
            }
            return sb.toString();
        }

        public String SHA5(String input) throws NoSuchAlgorithmException {
            // SHA512

            MessageDigest md = MessageDigest.getInstance("SHA-512");
            md.update(input.getBytes());

            byte[] digest = md.digest();
            StringBuffer sb = new StringBuffer();
            for (byte b : digest) {
                sb.append(String.format("%02x", b & 0xff));
            }
            return sb.toString();
        }

    }

}
